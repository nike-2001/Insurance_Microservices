/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nikhilspring.insurance.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Simple payment event for policy activation and claim processing */
@org.apache.avro.specific.AvroGenerated
public class PaymentEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2300057278346184460L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.nikhilspring.insurance.events\",\"doc\":\"Simple payment event for policy activation and claim processing\",\"fields\":[{\"name\":\"paymentId\",\"type\":\"long\",\"doc\":\"Unique payment identifier\"},{\"name\":\"policyId\",\"type\":[\"null\",\"long\"],\"doc\":\"Policy ID if this is a policy payment\",\"default\":null},{\"name\":\"claimId\",\"type\":[\"null\",\"long\"],\"doc\":\"Claim ID if this is a claim payment\",\"default\":null},{\"name\":\"amount\",\"type\":\"double\",\"doc\":\"Payment amount\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"symbols\":[\"COMPLETED\",\"FAILED\",\"PENDING\"]},\"doc\":\"Payment status\"},{\"name\":\"paymentType\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentType\",\"symbols\":[\"PREMIUM\",\"CLAIM_PAYMENT\"]},\"doc\":\"Type of payment\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Payment timestamp in milliseconds\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique payment identifier */
  private long paymentId;
  /** Policy ID if this is a policy payment */
  private java.lang.Long policyId;
  /** Claim ID if this is a claim payment */
  private java.lang.Long claimId;
  /** Payment amount */
  private double amount;
  /** Payment status */
  private com.nikhilspring.insurance.events.PaymentStatus status;
  /** Type of payment */
  private com.nikhilspring.insurance.events.PaymentType paymentType;
  /** Payment timestamp in milliseconds */
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentEvent() {}

  /**
   * All-args constructor.
   * @param paymentId Unique payment identifier
   * @param policyId Policy ID if this is a policy payment
   * @param claimId Claim ID if this is a claim payment
   * @param amount Payment amount
   * @param status Payment status
   * @param paymentType Type of payment
   * @param timestamp Payment timestamp in milliseconds
   */
  public PaymentEvent(java.lang.Long paymentId, java.lang.Long policyId, java.lang.Long claimId, java.lang.Double amount, com.nikhilspring.insurance.events.PaymentStatus status, com.nikhilspring.insurance.events.PaymentType paymentType, java.lang.Long timestamp) {
    this.paymentId = paymentId;
    this.policyId = policyId;
    this.claimId = claimId;
    this.amount = amount;
    this.status = status;
    this.paymentType = paymentType;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paymentId;
    case 1: return policyId;
    case 2: return claimId;
    case 3: return amount;
    case 4: return status;
    case 5: return paymentType;
    case 6: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paymentId = (java.lang.Long)value$; break;
    case 1: policyId = (java.lang.Long)value$; break;
    case 2: claimId = (java.lang.Long)value$; break;
    case 3: amount = (java.lang.Double)value$; break;
    case 4: status = (com.nikhilspring.insurance.events.PaymentStatus)value$; break;
    case 5: paymentType = (com.nikhilspring.insurance.events.PaymentType)value$; break;
    case 6: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'paymentId' field.
   * @return Unique payment identifier
   */
  public long getPaymentId() {
    return paymentId;
  }


  /**
   * Sets the value of the 'paymentId' field.
   * Unique payment identifier
   * @param value the value to set.
   */
  public void setPaymentId(long value) {
    this.paymentId = value;
  }

  /**
   * Gets the value of the 'policyId' field.
   * @return Policy ID if this is a policy payment
   */
  public java.lang.Long getPolicyId() {
    return policyId;
  }


  /**
   * Sets the value of the 'policyId' field.
   * Policy ID if this is a policy payment
   * @param value the value to set.
   */
  public void setPolicyId(java.lang.Long value) {
    this.policyId = value;
  }

  /**
   * Gets the value of the 'claimId' field.
   * @return Claim ID if this is a claim payment
   */
  public java.lang.Long getClaimId() {
    return claimId;
  }


  /**
   * Sets the value of the 'claimId' field.
   * Claim ID if this is a claim payment
   * @param value the value to set.
   */
  public void setClaimId(java.lang.Long value) {
    this.claimId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Payment amount
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Payment amount
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Payment status
   */
  public com.nikhilspring.insurance.events.PaymentStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Payment status
   * @param value the value to set.
   */
  public void setStatus(com.nikhilspring.insurance.events.PaymentStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'paymentType' field.
   * @return Type of payment
   */
  public com.nikhilspring.insurance.events.PaymentType getPaymentType() {
    return paymentType;
  }


  /**
   * Sets the value of the 'paymentType' field.
   * Type of payment
   * @param value the value to set.
   */
  public void setPaymentType(com.nikhilspring.insurance.events.PaymentType value) {
    this.paymentType = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Payment timestamp in milliseconds
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Payment timestamp in milliseconds
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new PaymentEvent RecordBuilder.
   * @return A new PaymentEvent RecordBuilder
   */
  public static com.nikhilspring.insurance.events.PaymentEvent.Builder newBuilder() {
    return new com.nikhilspring.insurance.events.PaymentEvent.Builder();
  }

  /**
   * Creates a new PaymentEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentEvent RecordBuilder
   */
  public static com.nikhilspring.insurance.events.PaymentEvent.Builder newBuilder(com.nikhilspring.insurance.events.PaymentEvent.Builder other) {
    if (other == null) {
      return new com.nikhilspring.insurance.events.PaymentEvent.Builder();
    } else {
      return new com.nikhilspring.insurance.events.PaymentEvent.Builder(other);
    }
  }

  /**
   * Creates a new PaymentEvent RecordBuilder by copying an existing PaymentEvent instance.
   * @param other The existing instance to copy.
   * @return A new PaymentEvent RecordBuilder
   */
  public static com.nikhilspring.insurance.events.PaymentEvent.Builder newBuilder(com.nikhilspring.insurance.events.PaymentEvent other) {
    if (other == null) {
      return new com.nikhilspring.insurance.events.PaymentEvent.Builder();
    } else {
      return new com.nikhilspring.insurance.events.PaymentEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentEvent>
    implements org.apache.avro.data.RecordBuilder<PaymentEvent> {

    /** Unique payment identifier */
    private long paymentId;
    /** Policy ID if this is a policy payment */
    private java.lang.Long policyId;
    /** Claim ID if this is a claim payment */
    private java.lang.Long claimId;
    /** Payment amount */
    private double amount;
    /** Payment status */
    private com.nikhilspring.insurance.events.PaymentStatus status;
    /** Type of payment */
    private com.nikhilspring.insurance.events.PaymentType paymentType;
    /** Payment timestamp in milliseconds */
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nikhilspring.insurance.events.PaymentEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.policyId)) {
        this.policyId = data().deepCopy(fields()[1].schema(), other.policyId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.claimId)) {
        this.claimId = data().deepCopy(fields()[2].schema(), other.claimId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[5].schema(), other.paymentType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nikhilspring.insurance.events.PaymentEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.policyId)) {
        this.policyId = data().deepCopy(fields()[1].schema(), other.policyId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.claimId)) {
        this.claimId = data().deepCopy(fields()[2].schema(), other.claimId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[5].schema(), other.paymentType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'paymentId' field.
      * Unique payment identifier
      * @return The value.
      */
    public long getPaymentId() {
      return paymentId;
    }


    /**
      * Sets the value of the 'paymentId' field.
      * Unique payment identifier
      * @param value The value of 'paymentId'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setPaymentId(long value) {
      validate(fields()[0], value);
      this.paymentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentId' field has been set.
      * Unique payment identifier
      * @return True if the 'paymentId' field has been set, false otherwise.
      */
    public boolean hasPaymentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paymentId' field.
      * Unique payment identifier
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearPaymentId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'policyId' field.
      * Policy ID if this is a policy payment
      * @return The value.
      */
    public java.lang.Long getPolicyId() {
      return policyId;
    }


    /**
      * Sets the value of the 'policyId' field.
      * Policy ID if this is a policy payment
      * @param value The value of 'policyId'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setPolicyId(java.lang.Long value) {
      validate(fields()[1], value);
      this.policyId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'policyId' field has been set.
      * Policy ID if this is a policy payment
      * @return True if the 'policyId' field has been set, false otherwise.
      */
    public boolean hasPolicyId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'policyId' field.
      * Policy ID if this is a policy payment
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearPolicyId() {
      policyId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'claimId' field.
      * Claim ID if this is a claim payment
      * @return The value.
      */
    public java.lang.Long getClaimId() {
      return claimId;
    }


    /**
      * Sets the value of the 'claimId' field.
      * Claim ID if this is a claim payment
      * @param value The value of 'claimId'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setClaimId(java.lang.Long value) {
      validate(fields()[2], value);
      this.claimId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'claimId' field has been set.
      * Claim ID if this is a claim payment
      * @return True if the 'claimId' field has been set, false otherwise.
      */
    public boolean hasClaimId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'claimId' field.
      * Claim ID if this is a claim payment
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearClaimId() {
      claimId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Payment amount
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Payment amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setAmount(double value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Payment amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * Payment amount
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Payment status
      * @return The value.
      */
    public com.nikhilspring.insurance.events.PaymentStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Payment status
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setStatus(com.nikhilspring.insurance.events.PaymentStatus value) {
      validate(fields()[4], value);
      this.status = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Payment status
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'status' field.
      * Payment status
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentType' field.
      * Type of payment
      * @return The value.
      */
    public com.nikhilspring.insurance.events.PaymentType getPaymentType() {
      return paymentType;
    }


    /**
      * Sets the value of the 'paymentType' field.
      * Type of payment
      * @param value The value of 'paymentType'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setPaymentType(com.nikhilspring.insurance.events.PaymentType value) {
      validate(fields()[5], value);
      this.paymentType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentType' field has been set.
      * Type of payment
      * @return True if the 'paymentType' field has been set, false otherwise.
      */
    public boolean hasPaymentType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentType' field.
      * Type of payment
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearPaymentType() {
      paymentType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Payment timestamp in milliseconds
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Payment timestamp in milliseconds
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder setTimestamp(long value) {
      validate(fields()[6], value);
      this.timestamp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Payment timestamp in milliseconds
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Payment timestamp in milliseconds
      * @return This builder.
      */
    public com.nikhilspring.insurance.events.PaymentEvent.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentEvent build() {
      try {
        PaymentEvent record = new PaymentEvent();
        record.paymentId = fieldSetFlags()[0] ? this.paymentId : (java.lang.Long) defaultValue(fields()[0]);
        record.policyId = fieldSetFlags()[1] ? this.policyId : (java.lang.Long) defaultValue(fields()[1]);
        record.claimId = fieldSetFlags()[2] ? this.claimId : (java.lang.Long) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Double) defaultValue(fields()[3]);
        record.status = fieldSetFlags()[4] ? this.status : (com.nikhilspring.insurance.events.PaymentStatus) defaultValue(fields()[4]);
        record.paymentType = fieldSetFlags()[5] ? this.paymentType : (com.nikhilspring.insurance.events.PaymentType) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.lang.Long) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentEvent>
    READER$ = (org.apache.avro.io.DatumReader<PaymentEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.paymentId);

    if (this.policyId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.policyId);
    }

    if (this.claimId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.claimId);
    }

    out.writeDouble(this.amount);

    out.writeEnum(this.status.ordinal());

    out.writeEnum(this.paymentType.ordinal());

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.paymentId = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.policyId = null;
      } else {
        this.policyId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.claimId = null;
      } else {
        this.claimId = in.readLong();
      }

      this.amount = in.readDouble();

      this.status = com.nikhilspring.insurance.events.PaymentStatus.values()[in.readEnum()];

      this.paymentType = com.nikhilspring.insurance.events.PaymentType.values()[in.readEnum()];

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.paymentId = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.policyId = null;
          } else {
            this.policyId = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.claimId = null;
          } else {
            this.claimId = in.readLong();
          }
          break;

        case 3:
          this.amount = in.readDouble();
          break;

        case 4:
          this.status = com.nikhilspring.insurance.events.PaymentStatus.values()[in.readEnum()];
          break;

        case 5:
          this.paymentType = com.nikhilspring.insurance.events.PaymentType.values()[in.readEnum()];
          break;

        case 6:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










